{
  "contract_name": "mock-red-bank",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "coins"
    ],
    "properties": {
      "coins": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/CoinMarketInfo"
        }
      }
    },
    "definitions": {
      "CoinMarketInfo": {
        "type": "object",
        "required": [
          "denom",
          "liquidation_threshold",
          "max_ltv"
        ],
        "properties": {
          "denom": {
            "type": "string"
          },
          "liquidation_threshold": {
            "$ref": "#/definitions/Decimal"
          },
          "max_ltv": {
            "$ref": "#/definitions/Decimal"
          }
        }
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "borrow"
        ],
        "properties": {
          "borrow": {
            "type": "object",
            "required": [
              "coin"
            ],
            "properties": {
              "coin": {
                "$ref": "#/definitions/Coin"
              },
              "recipient": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "repay"
        ],
        "properties": {
          "repay": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              },
              "on_behalf_of": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "user_asset_debt"
        ],
        "properties": {
          "user_asset_debt": {
            "type": "object",
            "required": [
              "denom",
              "user_address"
            ],
            "properties": {
              "denom": {
                "type": "string"
              },
              "user_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "market"
        ],
        "properties": {
          "market": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "market": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Market",
      "type": "object",
      "required": [
        "borrow_enabled",
        "borrow_index",
        "borrow_rate",
        "debt_total_scaled",
        "denom",
        "deposit_cap",
        "deposit_enabled",
        "indexes_last_updated",
        "liquidation_bonus",
        "liquidation_threshold",
        "liquidity_index",
        "liquidity_rate",
        "max_loan_to_value",
        "reserve_factor"
      ],
      "properties": {
        "borrow_enabled": {
          "type": "boolean"
        },
        "borrow_index": {
          "$ref": "#/definitions/Decimal"
        },
        "borrow_rate": {
          "$ref": "#/definitions/Decimal"
        },
        "debt_total_scaled": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        },
        "deposit_cap": {
          "$ref": "#/definitions/Uint128"
        },
        "deposit_enabled": {
          "type": "boolean"
        },
        "indexes_last_updated": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "liquidation_bonus": {
          "$ref": "#/definitions/Decimal"
        },
        "liquidation_threshold": {
          "$ref": "#/definitions/Decimal"
        },
        "liquidity_index": {
          "$ref": "#/definitions/Decimal"
        },
        "liquidity_rate": {
          "$ref": "#/definitions/Decimal"
        },
        "max_loan_to_value": {
          "$ref": "#/definitions/Decimal"
        },
        "reserve_factor": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "user_asset_debt": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserAssetDebtResponse",
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      },
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
